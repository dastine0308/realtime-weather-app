{"ast":null,"code":"// STEP 1：匯入日出日落資料\nimport sunriseAndSunsetData from './sunrise-sunset.json';\nexport const getMoment = locationName => {\n  // STEP 2：從日出日落時間中找出符合的地區\n  const location = sunriseAndSunsetData.find(data => data.locationName === locationName); // STEP 3：找不到的話則拋出錯誤訊息\n\n  if (!location) {\n    throw new Error(`找不到 ${location} 的日出日落資料`);\n  } // STEP 4：取得當前時間\n\n\n  const now = new Date(); // STEP 5：將當前時間以 \"2019-10-08\" 的時間格式呈現\n\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit'\n  }).format(now).replace(/\\//g, '-'); // STEP 6：從該地區中找到對應的日期\n\n  const locationDate = location === null || location === void 0 ? void 0 : location.time.find(time => time.dataTime === nowDate); // STEP 7：找不到的話則拋出錯誤訊息\n\n  if (!locationDate) {\n    throw new Error(`找不到 ${locationName} 在 ${nowDate} 的日出日落資料`);\n  } // STEP 8：將日出日落以及當前時間轉成時間戳記（TimeStamp）\n\n\n  const sunriseTimestamp = new Date(`${locationDate.dataTime} ${locationDate.sunrise}`).getTime();\n  const sunsetTimestamp = new Date(`${locationDate.dataTime} ${locationDate.sunset}`).getTime();\n  const nowTimeStamp = now.getTime(); // STEP 9：若當前時間介於日出和日落中間，則表示為白天，否則為晚上\n\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp ? 'day' : 'night';\n};\nexport const availableLocations = [{\n  cityName: '宜蘭縣',\n  locationName: '宜蘭',\n  sunriseCityName: '宜蘭縣'\n}, {\n  cityName: '嘉義市',\n  locationName: '嘉義',\n  sunriseCityName: '嘉義市'\n}, {\n  cityName: '屏東縣',\n  locationName: '恆春',\n  sunriseCityName: '屏東縣'\n}, {\n  cityName: '苗栗縣',\n  locationName: '國一N142K',\n  // 銅鑼鄉\n  sunriseCityName: '苗栗縣'\n}, {\n  cityName: '雲林縣',\n  locationName: '國一N234K',\n  sunriseCityName: '雲林縣'\n}, {\n  cityName: '臺東縣',\n  locationName: '臺東',\n  sunriseCityName: '臺東縣'\n}, {\n  cityName: '臺北市',\n  locationName: '臺北',\n  sunriseCityName: '臺北市'\n}, {\n  cityName: '金門縣',\n  locationName: '金門',\n  sunriseCityName: '金門縣'\n}, {\n  cityName: '桃園市',\n  locationName: '新屋',\n  sunriseCityName: '桃園市'\n}, {\n  cityName: '彰化縣',\n  locationName: '彰師大',\n  sunriseCityName: '彰化縣'\n}, {\n  cityName: '嘉義縣',\n  locationName: '國一N250K',\n  // 大林鎮\n  sunriseCityName: '嘉義縣'\n}, {\n  cityName: '高雄市',\n  locationName: '高雄',\n  sunriseCityName: '高雄市'\n}, {\n  cityName: '基隆市',\n  locationName: '基隆',\n  sunriseCityName: '基隆市'\n}, {\n  cityName: '臺南市',\n  locationName: '南區中心',\n  sunriseCityName: '臺南市'\n}, {\n  cityName: '南投縣',\n  locationName: '日月潭',\n  sunriseCityName: '南投縣'\n}, {\n  cityName: '臺中市',\n  locationName: '臺中',\n  sunriseCityName: '臺中市'\n}, {\n  cityName: '新竹縣',\n  locationName: '新竹',\n  sunriseCityName: '新竹縣'\n}, {\n  cityName: '花蓮縣',\n  locationName: '花蓮',\n  sunriseCityName: '花蓮縣'\n}, {\n  cityName: '連江縣',\n  locationName: '馬祖',\n  sunriseCityName: '連江縣'\n}, {\n  cityName: '澎湖縣',\n  locationName: '澎湖',\n  sunriseCityName: '澎湖縣'\n}, {\n  cityName: '新北市',\n  locationName: '板橋',\n  sunriseCityName: '新北市'\n}];\nexport const findLocation = cityName => {\n  availableLocations.find(item => {\n    return item.cityName === cityName;\n  });\n};","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/utilis/helpers.js"],"names":["sunriseAndSunsetData","getMoment","locationName","location","find","data","Error","now","Date","nowDate","Intl","DateTimeFormat","year","month","day","format","replace","locationDate","time","dataTime","sunriseTimestamp","sunrise","getTime","sunsetTimestamp","sunset","nowTimeStamp","availableLocations","cityName","sunriseCityName","findLocation","item"],"mappings":"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","sourcesContent":["// STEP 1：匯入日出日落資料\nimport sunriseAndSunsetData from './sunrise-sunset.json';\n\nexport const getMoment = (locationName) => {\n  // STEP 2：從日出日落時間中找出符合的地區\n  const location = sunriseAndSunsetData.find(\n    (data) => data.locationName === locationName\n  );\n\n  // STEP 3：找不到的話則拋出錯誤訊息\n  if (!location) {\n    throw new Error(`找不到 ${location} 的日出日落資料`);\n  }\n\n  // STEP 4：取得當前時間\n  const now = new Date();\n\n  // STEP 5：將當前時間以 \"2019-10-08\" 的時間格式呈現\n  const nowDate = Intl.DateTimeFormat('zh-TW', {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n  })\n    .format(now)\n    .replace(/\\//g, '-');\n\n  // STEP 6：從該地區中找到對應的日期\n  const locationDate = location?.time.find((time) => time.dataTime === nowDate);\n\n  // STEP 7：找不到的話則拋出錯誤訊息\n  if (!locationDate) {\n    throw new Error(`找不到 ${locationName} 在 ${nowDate} 的日出日落資料`);\n  }\n\n  // STEP 8：將日出日落以及當前時間轉成時間戳記（TimeStamp）\n  const sunriseTimestamp = new Date(\n    `${locationDate.dataTime} ${locationDate.sunrise}`\n  ).getTime();\n  const sunsetTimestamp = new Date(\n    `${locationDate.dataTime} ${locationDate.sunset}`\n  ).getTime();\n  const nowTimeStamp = now.getTime();\n\n  // STEP 9：若當前時間介於日出和日落中間，則表示為白天，否則為晚上\n  return sunriseTimestamp <= nowTimeStamp && nowTimeStamp <= sunsetTimestamp\n    ? 'day'\n    : 'night';\n};\n\nexport const availableLocations = [\n    {\n      cityName: '宜蘭縣',\n      locationName: '宜蘭',\n      sunriseCityName: '宜蘭縣',\n    },\n    {\n      cityName: '嘉義市',\n      locationName: '嘉義',\n      sunriseCityName: '嘉義市',\n    },\n    {\n      cityName: '屏東縣',\n      locationName: '恆春',\n      sunriseCityName: '屏東縣',\n    },\n    {\n      cityName: '苗栗縣',\n      locationName: '國一N142K', // 銅鑼鄉\n      sunriseCityName: '苗栗縣',\n    },\n    {\n      cityName: '雲林縣',\n      locationName: '國一N234K',\n      sunriseCityName: '雲林縣',\n    },\n    {\n      cityName: '臺東縣',\n      locationName: '臺東',\n      sunriseCityName: '臺東縣',\n    },\n    {\n      cityName: '臺北市',\n      locationName: '臺北',\n      sunriseCityName: '臺北市',\n    },\n    {\n      cityName: '金門縣',\n      locationName: '金門',\n      sunriseCityName: '金門縣',\n    },\n    {\n      cityName: '桃園市',\n      locationName: '新屋',\n      sunriseCityName: '桃園市',\n    },\n    {\n      cityName: '彰化縣',\n      locationName: '彰師大',\n      sunriseCityName: '彰化縣',\n    },\n    {\n      cityName: '嘉義縣',\n      locationName: '國一N250K', // 大林鎮\n      sunriseCityName: '嘉義縣',\n    },\n    {\n      cityName: '高雄市',\n      locationName: '高雄',\n      sunriseCityName: '高雄市',\n    },\n    {\n      cityName: '基隆市',\n      locationName: '基隆',\n      sunriseCityName: '基隆市',\n    },\n    {\n      cityName: '臺南市',\n      locationName: '南區中心',\n      sunriseCityName: '臺南市',\n    },\n    {\n      cityName: '南投縣',\n      locationName: '日月潭',\n      sunriseCityName: '南投縣',\n    },\n    {\n      cityName: '臺中市',\n      locationName: '臺中',\n      sunriseCityName: '臺中市',\n    },\n    {\n      cityName: '新竹縣',\n      locationName: '新竹',\n      sunriseCityName: '新竹縣',\n    },\n    {\n      cityName: '花蓮縣',\n      locationName: '花蓮',\n      sunriseCityName: '花蓮縣',\n    },\n    {\n      cityName: '連江縣',\n      locationName: '馬祖',\n      sunriseCityName: '連江縣',\n    },\n    {\n      cityName: '澎湖縣',\n      locationName: '澎湖',\n      sunriseCityName: '澎湖縣',\n    },\n    {\n      cityName: '新北市',\n      locationName: '板橋',\n      sunriseCityName: '新北市',\n    },\n];\n\nexport const findLocation = (cityName) => {\n    availableLocations.find((item) => {\n        return item.cityName === cityName;\n    })\n}"]},"metadata":{},"sourceType":"module"}