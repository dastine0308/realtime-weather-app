{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\n\nconst fetchCurrentWeather = ({\n  authorizationKey,\n  locationName\n}) => {\n  // 加上 return 直接把 fetch API 回傳的 Promise 再回傳出去\n  return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}\n    `).then(resp => resp.json()).then(data => {\n    // STEP 1：定義 locationData 把回傳的資料中會用到的部分取出來\n    const locationData = data.records.location[0]; // STEP 2：將風速（WDSD）和氣溫（TEMP）的資料取出\n\n    const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n      if (['WDSD', 'TEMP'].includes(item.elementName)) {\n        neededElements[item.elementName] = item.elementValue;\n      }\n\n      return neededElements;\n    }, {}); //STEP 3: 回傳資料\n\n    return {\n      locationName: locationData.locationName,\n      temperature: weatherElements.TEMP,\n      windSpeed: weatherElements.WDSD,\n      observationTime: locationData.time.obsTime\n    };\n  });\n};\n\nconst fetchWeatherForecast = ({\n  authorizationKey,\n  cityName\n}) => {\n  return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${cityName}`).then(resp => resp.json()).then(data => {\n    const locationData = data.records.location[0];\n    const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n      if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\n        neededElements[item.elementName] = item.time[0].parameter;\n      }\n\n      return neededElements;\n    }, {});\n    return {\n      description: weatherElements.Wx.parameterName,\n      weatherCode: weatherElements.Wx.parameterValue,\n      rainPossibility: weatherElements.PoP.parameterName,\n      comfortability: weatherElements.CI.parameterName\n    };\n  });\n};\n\nconst useWeatherAPI = ({\n  locationName,\n  cityName,\n  authorizationKey\n}) => {\n  _s();\n\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false\n  }); // 確保 fetchData 不會因為元件重新轉譯而變成新的\n\n  const fetchData = useCallback(async () => {\n    setWeatherElement(prevState => ({ ...prevState,\n      isLoading: true\n    }));\n    const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather({\n      authorizationKey\n    }), fetchWeatherForecast()]);\n    setWeatherElement({ ...currentWeather,\n      ...weatherForecast,\n      isLoading: false\n    });\n  }, []);\n  useEffect(() => {\n    console.log('execute function is useEffect');\n    fetchData();\n  }, [fetchData]);\n  return [weatherElement, fetchData];\n};\n\n_s(useWeatherAPI, \"evuHwNLfW019SOKagrgT6yx3MPU=\");\n\nexport default useWeatherAPI;","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/hooks/useWeatherAPI.js"],"names":["useState","useEffect","useCallback","fetchCurrentWeather","authorizationKey","locationName","fetch","then","resp","json","data","locationData","records","location","weatherElements","weatherElement","reduce","neededElements","item","includes","elementName","elementValue","temperature","TEMP","windSpeed","WDSD","observationTime","time","obsTime","fetchWeatherForecast","cityName","parameter","description","Wx","parameterName","weatherCode","parameterValue","rainPossibility","PoP","comfortability","CI","useWeatherAPI","setWeatherElement","Date","isLoading","fetchData","prevState","currentWeather","weatherForecast","Promise","all","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst fetchCurrentWeather = ({authorizationKey, locationName}) => {\n    // 加上 return 直接把 fetch API 回傳的 Promise 再回傳出去\n    return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}\n    `)\n    .then((resp) => resp.json())\n    .then((data) => {\n      // STEP 1：定義 locationData 把回傳的資料中會用到的部分取出來\n      const locationData = data.records.location[0];\n  \n      // STEP 2：將風速（WDSD）和氣溫（TEMP）的資料取出\n      const weatherElements = locationData.weatherElement.reduce(\n        (neededElements, item) => {\n          if (['WDSD', 'TEMP'].includes(item.elementName)) {\n            neededElements[item.elementName] = item.elementValue;\n          }\n          return neededElements;\n        },\n        {}\n      );     \n      \n      //STEP 3: 回傳資料\n      return {\n        locationName: locationData.locationName,\n        temperature: weatherElements.TEMP,\n        windSpeed: weatherElements.WDSD,\n        observationTime: locationData.time.obsTime,\n      }\n      \n    });\n}\n  \nconst fetchWeatherForecast = ({authorizationKey, cityName}) => {\nreturn fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${cityName}`)\n.then((resp) => resp.json())\n.then((data) => {\n    const locationData = data.records.location[0];\n    const weatherElements = locationData.weatherElement.reduce(\n    (neededElements, item)=>{\n        if(['Wx','PoP','CI'].includes(item.elementName)){\n        neededElements[item.elementName] = item.time[0].parameter;\n        }\n        return neededElements;\n    },\n    {}\n    )\n\n    return {\n    description: weatherElements.Wx.parameterName,\n    weatherCode: weatherElements.Wx.parameterValue,\n    rainPossibility: weatherElements.PoP.parameterName,\n    comfortability: weatherElements.CI.parameterName,\n    }\n});\n}\n\nconst useWeatherAPI = ({locationName, cityName, authorizationKey}) => {\n    const [weatherElement, setWeatherElement] = useState({\n        locationName: '',\n        temperature: 0,\n        windSpeed: 0,\n        observationTime: new Date(),\n        description: '',\n        rainPossibility: 0,\n        weatherCode: 0,\n        comfortability: '',\n        isLoading: false,\n    });\n\n    // 確保 fetchData 不會因為元件重新轉譯而變成新的\n    const fetchData = useCallback(async () => {\n        setWeatherElement((prevState) => ({\n            ...prevState,\n            isLoading: true,\n        }));\n\n        const [currentWeather, weatherForecast] = await Promise.all([\n            fetchCurrentWeather({authorizationKey, }), \n            fetchWeatherForecast(),\n        ]);\n\n        setWeatherElement({\n            ...currentWeather,\n            ...weatherForecast,\n            isLoading: false,\n        });\n    },[])\n\n    useEffect(()=>{\n        console.log('execute function is useEffect');\n        fetchData();\n    },[fetchData])\n\n    return [weatherElement, fetchData];\n};\n\nexport default useWeatherAPI;\n"]},"metadata":{},"sourceType":"module"}