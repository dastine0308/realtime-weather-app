{"ast":null,"code":"var _jsxFileName = \"/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from '@emotion/react';\nimport dayjs from 'dayjs';\nimport { ReactComponent as DayCloudyIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/day-cloudy.svg\";\nimport { ReactComponent as AirFlowIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/airFlow.svg\";\nimport { ReactComponent as RainIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/rain.svg\";\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/refresh.svg\";\nimport { ReactComponent as LoadingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./images/loading.svg\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282'\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow: '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc'\n  }\n};\nconst Container = styled.div`\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c = Container;\nconst WeatherCard = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: ${({\n  theme\n}) => theme.boxShadow};\n  background-color: ${({\n  theme\n}) => theme.foregroundColor};\n  box-sizing: border-box;\n  padding: 30px 15px;\n`;\n_c2 = WeatherCard;\nconst Location = styled.div`\n  font-size: 28px;\n  color: ${({\n  theme\n}) => theme.titleColor};\n  margin-bottom: 20px;\n`;\n_c3 = Location;\nconst Description = styled.div`\n  font-size: 16px;\n  color: ${({\n  theme\n}) => theme.textColor};\n  margin-bottom: 30px;\n`;\n_c4 = Description;\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n_c5 = CurrentWeather;\nconst Temperature = styled.div`\n  color: ${({\n  theme\n}) => theme.temperatureColor};\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`;\n_c6 = Temperature;\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`;\n_c7 = Celsius;\nconst AirFlow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({\n  theme\n}) => theme.textColor};\n  margin-bottom: 20px;\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n_c8 = AirFlow;\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({\n  theme\n}) => theme.textColor};\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n_c9 = Rain;\nconst DayCloudy = styled(DayCloudyIcon)`\n  flex-basis: 30%;\n`;\n_c10 = DayCloudy;\nconst Refresh = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: ${({\n  theme\n}) => theme.textColor};\n\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n    /* STEP 2：使用 rotate 動畫效果在 svg 圖示上 */\n    animation: rotate infinite 1.5s linear;\n    animation-duration: ${({\n  isLoading\n}) => isLoading ? '1.5s' : '0s'};\n  }\n  /* STEP 1：定義旋轉的動畫效果，並取名為 rotate */\n  @keyframes rotate {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n`;\n_c11 = Refresh;\n\nconst fetchCurrentWeather = () => {\n  fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME}\n  `).then(resp => resp.json()).then(data => {\n    // STEP 1：定義 locationData 把回傳的資料中會用到的部分取出來\n    const locationData = data.records.location[0]; // STEP 2：將風速（WDSD）和氣溫（TEMP）的資料取出\n\n    const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n      if (['WDSD', 'TEMP'].includes(item.elementName)) {\n        neededElements[item.elementName] = item.elementValue;\n      }\n\n      return neededElements;\n    }, {}); //STEP 3: 回傳資料\n\n    return {\n      locationName: locationData.locationName,\n      temperature: weatherElements.TEMP,\n      windSpeed: weatherElements.WDSD,\n      observationTime: locationData.time.obsTime\n    };\n  });\n};\n\nconst fetchWeatherForecast = () => {\n  fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME_FORECAST}`).then(resp => resp.json()).then(data => {\n    const locationData = data.records.location[0];\n    const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n      if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\n        neededElements[item.elementName] = item.time[0].parameter;\n      }\n\n      return neededElements;\n    }, {});\n    return {\n      description: weatherElements.Wx.parameterName,\n      weatherCode: weatherElements.Wx.parameterValue,\n      rainPossibility: weatherElements.PoP.parameterName,\n      comfortability: weatherElements.CI.parameterName\n    };\n  });\n};\n\nconst AUTHORIZATION_KEY = 'CWB-D2028D15-4ED5-43E4-A223-203E2D7913D1';\nconst LOCATION_NAME = '臺北';\nconst LOCATION_NAME_FORECAST = '臺北市';\n\nfunction App() {\n  _s();\n\n  // console.log('invoke function component');\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false\n  });\n  useEffect(() => {\n    // console.log('execute function is useEffect');\n    const fetchData = async () => {\n      setWeatherElement(prevState => ({ ...prevState,\n        isLoading: true\n      }));\n      const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather(), fetchWeatherForecast()]);\n      setWeatherElement(() => {});\n    };\n\n    fetchData();\n  }, []);\n  const {\n    locationName,\n    temperature,\n    windSpeed,\n    observationTime,\n    description,\n    rainPossibility,\n    weatherCode,\n    comfortability,\n    isLoading\n  } = weatherElement;\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme[currentTheme],\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(WeatherCard, {\n        children: [/*#__PURE__*/_jsxDEV(Location, {\n          children: locationName\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Description, {\n          children: [description, \" \", comfortability]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(CurrentWeather, {\n          children: [/*#__PURE__*/_jsxDEV(Temperature, {\n            children: [Math.round(temperature), \" \", /*#__PURE__*/_jsxDEV(Celsius, {\n              children: \"\\xB0C\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 41\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 263,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(DayCloudy, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 266,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(AirFlow, {\n          children: [/*#__PURE__*/_jsxDEV(AirFlowIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 269,\n            columnNumber: 13\n          }, this), \" \", windSpeed, \" m/h\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Rain, {\n          children: [/*#__PURE__*/_jsxDEV(RainIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 272,\n            columnNumber: 13\n          }, this), \" \", rainPossibility, \"%\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 271,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Refresh, {\n          onClick: () => {\n            fetchCurrentWeather();\n            fetchWeatherForecast();\n          },\n          isLoading: isLoading,\n          children: [\"\\u6700\\u5F8C\\u89C0\\u6E2C\\u6642\\u9593\\uFF1A\", new Intl.DateTimeFormat('zh-TW', {\n            hour: 'numeric',\n            minute: 'numeric'\n          }).format(dayjs(observationTime)), isLoading ? /*#__PURE__*/_jsxDEV(LoadingIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 26\n          }, this) : /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 286,\n            columnNumber: 43\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 274,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 259,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 256,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"90Knu4jNoIEEoVnjakE5THHOtxU=\");\n\n_c12 = App;\nexport default App;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"WeatherCard\");\n$RefreshReg$(_c3, \"Location\");\n$RefreshReg$(_c4, \"Description\");\n$RefreshReg$(_c5, \"CurrentWeather\");\n$RefreshReg$(_c6, \"Temperature\");\n$RefreshReg$(_c7, \"Celsius\");\n$RefreshReg$(_c8, \"AirFlow\");\n$RefreshReg$(_c9, \"Rain\");\n$RefreshReg$(_c10, \"DayCloudy\");\n$RefreshReg$(_c11, \"Refresh\");\n$RefreshReg$(_c12, \"App\");","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/App.js"],"names":["React","useState","useEffect","styled","ThemeProvider","dayjs","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperatureColor","textColor","dark","Container","div","WeatherCard","Location","Description","CurrentWeather","Temperature","Celsius","AirFlow","Rain","DayCloudy","DayCloudyIcon","Refresh","isLoading","fetchCurrentWeather","fetch","AUTHORIZATION_KEY","LOCATION_NAME","then","resp","json","data","locationData","records","location","weatherElements","weatherElement","reduce","neededElements","item","includes","elementName","elementValue","locationName","temperature","TEMP","windSpeed","WDSD","observationTime","time","obsTime","fetchWeatherForecast","LOCATION_NAME_FORECAST","parameter","description","Wx","parameterName","weatherCode","parameterValue","rainPossibility","PoP","comfortability","CI","App","currentTheme","setCurrentTheme","setWeatherElement","Date","fetchData","prevState","currentWeather","weatherForecast","Promise","all","Math","round","Intl","DateTimeFormat","hour","minute","format"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from '@emotion/react';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as DayCloudyIcon } from './images/day-cloudy.svg';\nimport { ReactComponent as AirFlowIcon } from './images/airFlow.svg';\nimport { ReactComponent as RainIcon } from './images/rain.svg';\nimport { ReactComponent as RefreshIcon } from './images/refresh.svg';\nimport { ReactComponent as LoadingIcon } from './images/loading.svg';\n\n\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\nconst WeatherCard = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  background-color: ${({ theme }) => theme.foregroundColor};\n  box-sizing: border-box;\n  padding: 30px 15px;\n`;\n\nconst Location = styled.div`\n  font-size: 28px;\n  color: ${({ theme }) => theme.titleColor};\n  margin-bottom: 20px;\n`;\n\nconst Description = styled.div`\n  font-size: 16px;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 30px;\n`;\n\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst Temperature = styled.div`\n  color: ${({ theme }) => theme.temperatureColor};\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`;\n\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`;\n\nconst AirFlow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 20px;\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n\nconst DayCloudy = styled(DayCloudyIcon)`\n  flex-basis: 30%;\n`;\n\nconst Refresh = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: ${({ theme }) => theme.textColor};\n\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n    /* STEP 2：使用 rotate 動畫效果在 svg 圖示上 */\n    animation: rotate infinite 1.5s linear;\n    animation-duration: ${({ isLoading }) => (isLoading ? '1.5s' : '0s')};\n  }\n  /* STEP 1：定義旋轉的動畫效果，並取名為 rotate */\n  @keyframes rotate {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n`;\n\nconst fetchCurrentWeather = () => {\n  fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME}\n  `)\n  .then((resp) => resp.json())\n  .then((data) => {\n    // STEP 1：定義 locationData 把回傳的資料中會用到的部分取出來\n    const locationData = data.records.location[0];\n\n    // STEP 2：將風速（WDSD）和氣溫（TEMP）的資料取出\n    const weatherElements = locationData.weatherElement.reduce(\n      (neededElements, item) => {\n        if (['WDSD', 'TEMP'].includes(item.elementName)) {\n          neededElements[item.elementName] = item.elementValue;\n        }\n        return neededElements;\n      },\n      {}\n    );     \n    \n    //STEP 3: 回傳資料\n    return {\n      locationName: locationData.locationName,\n      temperature: weatherElements.TEMP,\n      windSpeed: weatherElements.WDSD,\n      observationTime: locationData.time.obsTime,\n    }\n    \n  });\n}\n\nconst fetchWeatherForecast = () => {\n  fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${AUTHORIZATION_KEY}&locationName=${LOCATION_NAME_FORECAST}`)\n  .then((resp) => resp.json())\n  .then((data) => {\n    const locationData = data.records.location[0];\n    const weatherElements = locationData.weatherElement.reduce(\n      (neededElements, item)=>{\n        if(['Wx','PoP','CI'].includes(item.elementName)){\n          neededElements[item.elementName] = item.time[0].parameter;\n        }\n        return neededElements;\n      },\n      {}\n    )\n\n    return {\n      description: weatherElements.Wx.parameterName,\n      weatherCode: weatherElements.Wx.parameterValue,\n      rainPossibility: weatherElements.PoP.parameterName,\n      comfortability: weatherElements.CI.parameterName,\n    }\n  });\n}\n\n\nconst AUTHORIZATION_KEY = 'CWB-D2028D15-4ED5-43E4-A223-203E2D7913D1';\nconst LOCATION_NAME = '臺北';\nconst LOCATION_NAME_FORECAST = '臺北市';\n\nfunction App() {\n  // console.log('invoke function component');\n\n  const [currentTheme, setCurrentTheme] = useState('light');\n\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false,\n  });\n\n\n  useEffect(()=>{\n    // console.log('execute function is useEffect');\n\n    const fetchData = async () => {\n      setWeatherElement((prevState) => ({\n        ...prevState,\n        isLoading: true\n      }));\n\n      const [currentWeather, weatherForecast] = await Promise.all([\n        fetchCurrentWeather(), \n        fetchWeatherForecast(),\n      ]);\n\n      setWeatherElement(() => {\n        \n      })\n\n    }\n\n    fetchData();\n  },[])\n\n  const {\n    locationName,\n    temperature,\n    windSpeed,\n    observationTime,\n    description,\n    rainPossibility,\n    weatherCode,\n    comfortability,\n    isLoading\n  } = weatherElement;\n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {/* {console.log('render')} */}\n        <WeatherCard>\n          <Location>{locationName}</Location>\n          <Description>{description} {comfortability}</Description>\n          <CurrentWeather>\n            <Temperature>\n              {Math.round(temperature)} <Celsius>°C</Celsius>\n            </Temperature>\n            <DayCloudy />\n          </CurrentWeather>\n          <AirFlow>\n            <AirFlowIcon /> {windSpeed} m/h\n          </AirFlow>\n          <Rain>\n            <RainIcon /> {rainPossibility}%\n          </Rain>\n          <Refresh \n            onClick={()=>{\n              fetchCurrentWeather();\n              fetchWeatherForecast();\n            }} \n            isLoading={isLoading}\n          >\n            最後觀測時間：\n            {new Intl.DateTimeFormat('zh-TW', {\n              hour: 'numeric',\n              minute: 'numeric',\n            }).format(dayjs(observationTime))} \n            {isLoading ? <LoadingIcon/> : <RefreshIcon />}\n          </Refresh>\n        </WeatherCard>\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}