{"ast":null,"code":"var _jsxFileName = \"/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from '@emotion/react';\nimport { getMoment } from './utilis/helpers';\nimport WeatherCard from './views/WeatherCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282'\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow: '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc'\n  }\n};\nconst Container = styled.div`\n  background-color: ${({\n  theme\n}) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n_c = Container;\nconst AUTHORIZATION_KEY = 'CWB-D2028D15-4ED5-43E4-A223-203E2D7913D1';\nconst LOCATION_NAME = '臺北';\nconst LOCATION_NAME_FORECAST = '臺北市';\n\nfunction App() {\n  _s();\n\n  console.log('-----invoke function component-----');\n  const [currentTheme, setCurrentTheme] = useState('light');\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false\n  });\n  const moment = useMemo(() => getMoment(LOCATION_NAME_FORECAST), []);\n  useEffect(() => {\n    setCurrentTheme(moment === 'day' ? 'light' : 'dark');\n  }, [moment]); // 確保 fetchData 不會因為元件重新轉譯而變成新的\n\n  const fetchData = useCallback(async () => {\n    setWeatherElement(prevState => ({ ...prevState,\n      isLoading: true\n    }));\n    const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather(), fetchWeatherForecast()]);\n    setWeatherElement({ ...currentWeather,\n      ...weatherForecast,\n      isLoading: false\n    });\n  }, []);\n  useEffect(() => {\n    console.log('execute function is useEffect');\n    fetchData();\n  }, [fetchData]);\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: theme[currentTheme],\n    children: /*#__PURE__*/_jsxDEV(Container, {\n      children: [console.log('render'), /*#__PURE__*/_jsxDEV(WeatherCard, {\n        weatherElement: weatherElement,\n        moment: moment,\n        fetchData: fetchData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"cjoI2vgetMs5ln4Ws2Exy7BZbbo=\");\n\n_c2 = App;\nexport default App;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"App\");","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/App.js"],"names":["React","useState","useEffect","useCallback","useMemo","styled","ThemeProvider","getMoment","WeatherCard","theme","light","backgroundColor","foregroundColor","boxShadow","titleColor","temperatureColor","textColor","dark","Container","div","AUTHORIZATION_KEY","LOCATION_NAME","LOCATION_NAME_FORECAST","App","console","log","currentTheme","setCurrentTheme","weatherElement","setWeatherElement","locationName","temperature","windSpeed","observationTime","Date","description","rainPossibility","weatherCode","comfortability","isLoading","moment","fetchData","prevState","currentWeather","weatherForecast","Promise","all","fetchCurrentWeather","fetchWeatherForecast"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useCallback, useMemo } from 'react';\nimport styled from '@emotion/styled';\nimport { ThemeProvider } from '@emotion/react';\n\nimport { getMoment } from './utilis/helpers';\nimport WeatherCard from './views/WeatherCard';\n\n\n\nconst theme = {\n  light: {\n    backgroundColor: '#ededed',\n    foregroundColor: '#f9f9f9',\n    boxShadow: '0 1px 3px 0 #999999',\n    titleColor: '#212121',\n    temperatureColor: '#757575',\n    textColor: '#828282',\n  },\n  dark: {\n    backgroundColor: '#1F2022',\n    foregroundColor: '#121416',\n    boxShadow:\n      '0 1px 4px 0 rgba(12, 12, 13, 0.2), 0 0 0 1px rgba(0, 0, 0, 0.15)',\n    titleColor: '#f9f9fa',\n    temperatureColor: '#dddddd',\n    textColor: '#cccccc',\n  },\n};\n\nconst Container = styled.div`\n  background-color: ${({ theme }) => theme.backgroundColor};\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n`;\n\n\nconst AUTHORIZATION_KEY = 'CWB-D2028D15-4ED5-43E4-A223-203E2D7913D1';\nconst LOCATION_NAME = '臺北';\nconst LOCATION_NAME_FORECAST = '臺北市';\n\n\n\nfunction App() {\n  console.log('-----invoke function component-----');\n\n  const [currentTheme, setCurrentTheme] = useState('light');\n\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false,\n  });\n\n  const moment = useMemo(() => getMoment(LOCATION_NAME_FORECAST), []);\n\n  useEffect(() => {\n    setCurrentTheme( moment === 'day' ? 'light' : 'dark');\n  },[moment])\n\n\n  // 確保 fetchData 不會因為元件重新轉譯而變成新的\n  const fetchData = useCallback(async () => {\n    setWeatherElement((prevState) => ({\n      ...prevState,\n      isLoading: true,\n    }));\n\n    const [currentWeather, weatherForecast] = await Promise.all([\n      fetchCurrentWeather(), \n      fetchWeatherForecast(),\n    ]);\n\n    setWeatherElement({\n      ...currentWeather,\n      ...weatherForecast,\n      isLoading: false,\n    });\n  },[])\n\n  useEffect(()=>{\n    console.log('execute function is useEffect');\n    fetchData();\n  },[fetchData])\n\n  \n\n  return (\n    <ThemeProvider theme={theme[currentTheme]}>\n      <Container>\n        {console.log('render')}\n        <WeatherCard \n          weatherElement={weatherElement}\n          moment={moment}\n          fetchData={fetchData}\n        />\n      </Container>\n    </ThemeProvider>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}