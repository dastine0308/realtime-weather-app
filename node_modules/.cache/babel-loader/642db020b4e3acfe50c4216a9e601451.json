{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useWeatherAPI = (locationName, cityName, authorizationKey) => {\n  _s();\n\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false\n  });\n\n  const fetchCurrentWeather = () => {\n    // 加上 return 直接把 fetch API 回傳的 Promise 再回傳出去\n    return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}\n        `).then(resp => resp.json()).then(data => {\n      // STEP 1：定義 locationData 把回傳的資料中會用到的部分取出來\n      const locationData = data.records.location[0]; // STEP 2：將風速（WDSD）和氣溫（TEMP）的資料取出\n\n      const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n        if (['WDSD', 'TEMP'].includes(item.elementName)) {\n          neededElements[item.elementName] = item.elementValue;\n        }\n\n        return neededElements;\n      }, {}); //STEP 3: 回傳資料\n\n      return {\n        locationName: locationData.locationName,\n        temperature: weatherElements.TEMP,\n        windSpeed: weatherElements.WDSD,\n        observationTime: locationData.time.obsTime\n      };\n    });\n  };\n\n  const fetchWeatherForecast = () => {\n    return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${LOCATION_NAME_FORECAST}`).then(resp => resp.json()).then(data => {\n      const locationData = data.records.location[0];\n      const weatherElements = locationData.weatherElement.reduce((neededElements, item) => {\n        if (['Wx', 'PoP', 'CI'].includes(item.elementName)) {\n          neededElements[item.elementName] = item.time[0].parameter;\n        }\n\n        return neededElements;\n      }, {});\n      return {\n        description: weatherElements.Wx.parameterName,\n        weatherCode: weatherElements.Wx.parameterValue,\n        rainPossibility: weatherElements.PoP.parameterName,\n        comfortability: weatherElements.CI.parameterName\n      };\n    });\n  }; // 確保 fetchData 不會因為元件重新轉譯而變成新的\n\n\n  const fetchData = useCallback(async () => {\n    setWeatherElement(prevState => ({ ...prevState,\n      isLoading: true\n    }));\n    const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather(), fetchWeatherForecast()]);\n    setWeatherElement({ ...currentWeather,\n      ...weatherForecast,\n      isLoading: false\n    });\n  }, []);\n  useEffect(() => {\n    console.log('execute function is useEffect');\n    fetchData();\n  }, [fetchData]);\n  return [weatherElement, fetchData];\n};\n\n_s(useWeatherAPI, \"evuHwNLfW019SOKagrgT6yx3MPU=\");\n\nexport default useWeatherAPI;","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/hooks/useWeatherAPI.js"],"names":["useState","useEffect","useCallback","useWeatherAPI","locationName","cityName","authorizationKey","weatherElement","setWeatherElement","temperature","windSpeed","observationTime","Date","description","rainPossibility","weatherCode","comfortability","isLoading","fetchCurrentWeather","fetch","then","resp","json","data","locationData","records","location","weatherElements","reduce","neededElements","item","includes","elementName","elementValue","TEMP","WDSD","time","obsTime","fetchWeatherForecast","LOCATION_NAME_FORECAST","parameter","Wx","parameterName","parameterValue","PoP","CI","fetchData","prevState","currentWeather","weatherForecast","Promise","all","console","log"],"mappings":"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","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\nconst useWeatherAPI = (locationName, cityName, authorizationKey) => {\n    const [weatherElement, setWeatherElement] = useState({\n        locationName: '',\n        temperature: 0,\n        windSpeed: 0,\n        observationTime: new Date(),\n        description: '',\n        rainPossibility: 0,\n        weatherCode: 0,\n        comfortability: '',\n        isLoading: false,\n    });\n\n    const fetchCurrentWeather = () => {\n        // 加上 return 直接把 fetch API 回傳的 Promise 再回傳出去\n        return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/O-A0003-001?Authorization=${authorizationKey}&locationName=${locationName}\n        `)\n        .then((resp) => resp.json())\n        .then((data) => {\n          // STEP 1：定義 locationData 把回傳的資料中會用到的部分取出來\n          const locationData = data.records.location[0];\n      \n          // STEP 2：將風速（WDSD）和氣溫（TEMP）的資料取出\n          const weatherElements = locationData.weatherElement.reduce(\n            (neededElements, item) => {\n              if (['WDSD', 'TEMP'].includes(item.elementName)) {\n                neededElements[item.elementName] = item.elementValue;\n              }\n              return neededElements;\n            },\n            {}\n          );     \n          \n          //STEP 3: 回傳資料\n          return {\n            locationName: locationData.locationName,\n            temperature: weatherElements.TEMP,\n            windSpeed: weatherElements.WDSD,\n            observationTime: locationData.time.obsTime,\n          }\n          \n        });\n    }\n      \n    const fetchWeatherForecast = () => {\n    return fetch(`https://opendata.cwb.gov.tw/api/v1/rest/datastore/F-C0032-001?Authorization=${authorizationKey}&locationName=${LOCATION_NAME_FORECAST}`)\n    .then((resp) => resp.json())\n    .then((data) => {\n        const locationData = data.records.location[0];\n        const weatherElements = locationData.weatherElement.reduce(\n        (neededElements, item)=>{\n            if(['Wx','PoP','CI'].includes(item.elementName)){\n            neededElements[item.elementName] = item.time[0].parameter;\n            }\n            return neededElements;\n        },\n        {}\n        )\n    \n        return {\n        description: weatherElements.Wx.parameterName,\n        weatherCode: weatherElements.Wx.parameterValue,\n        rainPossibility: weatherElements.PoP.parameterName,\n        comfortability: weatherElements.CI.parameterName,\n        }\n    });\n    }\n\n    // 確保 fetchData 不會因為元件重新轉譯而變成新的\n    const fetchData = useCallback(async () => {\n        setWeatherElement((prevState) => ({\n            ...prevState,\n            isLoading: true,\n        }));\n\n        const [currentWeather, weatherForecast] = await Promise.all([\n        fetchCurrentWeather(), \n        fetchWeatherForecast(),\n        ]);\n\n        setWeatherElement({\n        ...currentWeather,\n        ...weatherForecast,\n        isLoading: false,\n        });\n    },[])\n\n    useEffect(()=>{\n        console.log('execute function is useEffect');\n        fetchData();\n    },[fetchData])\n\n    return [weatherElement, fetchData];\n};\n\nexport default useWeatherAPI;\n"]},"metadata":{},"sourceType":"module"}