{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect, useCallback } from 'react';\n\nconst useWeatherAPI = (locationName, cityName, authorizationKey) => {\n  _s();\n\n  const [weatherElement, setWeatherElement] = useState({\n    locationName: '',\n    temperature: 0,\n    windSpeed: 0,\n    observationTime: new Date(),\n    description: '',\n    rainPossibility: 0,\n    weatherCode: 0,\n    comfortability: '',\n    isLoading: false\n  }); // 確保 fetchData 不會因為元件重新轉譯而變成新的\n\n  const fetchData = useCallback(async () => {\n    setWeatherElement(prevState => ({ ...prevState,\n      isLoading: true\n    }));\n    const [currentWeather, weatherForecast] = await Promise.all([fetchCurrentWeather(), fetchWeatherForecast()]);\n    setWeatherElement({ ...currentWeather,\n      ...weatherForecast,\n      isLoading: false\n    });\n  }, []);\n  useEffect(() => {\n    console.log('execute function is useEffect');\n    fetchData();\n  }, [fetchData]);\n  return [weatherElement, fetchData];\n};\n\n_s(useWeatherAPI, \"evuHwNLfW019SOKagrgT6yx3MPU=\");\n\nexport default useWeatherAPI;","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/hooks/useWeatherAPI.js"],"names":["useState","useEffect","useCallback","useWeatherAPI","locationName","cityName","authorizationKey","weatherElement","setWeatherElement","temperature","windSpeed","observationTime","Date","description","rainPossibility","weatherCode","comfortability","isLoading","fetchData","prevState","currentWeather","weatherForecast","Promise","all","fetchCurrentWeather","fetchWeatherForecast","console","log"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,WAA9B,QAAiD,OAAjD;;AAIA,MAAMC,aAAa,GAAG,CAACC,YAAD,EAAeC,QAAf,EAAyBC,gBAAzB,KAA8C;AAAA;;AAChE,QAAM,CAACC,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC;AACjDI,IAAAA,YAAY,EAAE,EADmC;AAEjDK,IAAAA,WAAW,EAAE,CAFoC;AAGjDC,IAAAA,SAAS,EAAE,CAHsC;AAIjDC,IAAAA,eAAe,EAAE,IAAIC,IAAJ,EAJgC;AAKjDC,IAAAA,WAAW,EAAE,EALoC;AAMjDC,IAAAA,eAAe,EAAE,CANgC;AAOjDC,IAAAA,WAAW,EAAE,CAPoC;AAQjDC,IAAAA,cAAc,EAAE,EARiC;AASjDC,IAAAA,SAAS,EAAE;AATsC,GAAD,CAApD,CADgE,CAahE;;AACA,QAAMC,SAAS,GAAGhB,WAAW,CAAC,YAAY;AACtCM,IAAAA,iBAAiB,CAAEW,SAAD,KAAgB,EAC9B,GAAGA,SAD2B;AAE9BF,MAAAA,SAAS,EAAE;AAFmB,KAAhB,CAAD,CAAjB;AAKA,UAAM,CAACG,cAAD,EAAiBC,eAAjB,IAAoC,MAAMC,OAAO,CAACC,GAAR,CAAY,CACxDC,mBAAmB,EADqC,EAExDC,oBAAoB,EAFoC,CAAZ,CAAhD;AAKAjB,IAAAA,iBAAiB,CAAC,EACd,GAAGY,cADW;AAEd,SAAGC,eAFW;AAGdJ,MAAAA,SAAS,EAAE;AAHG,KAAD,CAAjB;AAKH,GAhB4B,EAgB3B,EAhB2B,CAA7B;AAkBAhB,EAAAA,SAAS,CAAC,MAAI;AACVyB,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ;AACAT,IAAAA,SAAS;AACZ,GAHQ,EAGP,CAACA,SAAD,CAHO,CAAT;AAKA,SAAO,CAACX,cAAD,EAAiBW,SAAjB,CAAP;AACH,CAtCD;;GAAMf,a;;AAwCN,eAAeA,aAAf","sourcesContent":["import { useState, useEffect, useCallback } from 'react';\n\n\n\nconst useWeatherAPI = (locationName, cityName, authorizationKey) => {\n    const [weatherElement, setWeatherElement] = useState({\n        locationName: '',\n        temperature: 0,\n        windSpeed: 0,\n        observationTime: new Date(),\n        description: '',\n        rainPossibility: 0,\n        weatherCode: 0,\n        comfortability: '',\n        isLoading: false,\n    });\n\n    // 確保 fetchData 不會因為元件重新轉譯而變成新的\n    const fetchData = useCallback(async () => {\n        setWeatherElement((prevState) => ({\n            ...prevState,\n            isLoading: true,\n        }));\n\n        const [currentWeather, weatherForecast] = await Promise.all([\n            fetchCurrentWeather(), \n            fetchWeatherForecast(),\n        ]);\n\n        setWeatherElement({\n            ...currentWeather,\n            ...weatherForecast,\n            isLoading: false,\n        });\n    },[])\n\n    useEffect(()=>{\n        console.log('execute function is useEffect');\n        fetchData();\n    },[fetchData])\n\n    return [weatherElement, fetchData];\n};\n\nexport default useWeatherAPI;\n"]},"metadata":{},"sourceType":"module"}