{"ast":null,"code":"var _jsxFileName = \"/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/views/WeatherCard.js\";\nimport React from \"react\";\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\nimport { ReactComponent as AirFlowIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./../images/airFlow.svg\";\nimport { ReactComponent as RainIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./../images/rain.svg\";\nimport { ReactComponent as RefreshIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./../images/refresh.svg\";\nimport { ReactComponent as LoadingIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./../images/loading.svg\";\nimport { ReactComponent as CogIcon } from \"@svgr/webpack?-svgo,+titleProp,+ref!./../images/cog.svg\";\nimport WeatherIcon from './../components/WeatherIcon';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WeatherCardWrapper = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: ${({\n  theme\n}) => theme.boxShadow};\n  background-color: ${({\n  theme\n}) => theme.foregroundColor};\n  box-sizing: border-box;\n  padding: 30px 15px;\n`;\n_c = WeatherCardWrapper;\nconst Location = styled.div`\n  font-size: 28px;\n  color: ${({\n  theme\n}) => theme.titleColor};\n  margin-bottom: 20px;\n`;\n_c2 = Location;\nconst Description = styled.div`\n  font-size: 16px;\n  color: ${({\n  theme\n}) => theme.textColor};\n  margin-bottom: 30px;\n`;\n_c3 = Description;\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n_c4 = CurrentWeather;\nconst Temperature = styled.div`\n  color: ${({\n  theme\n}) => theme.temperatureColor};\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`;\n_c5 = Temperature;\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`;\n_c6 = Celsius;\nconst AirFlow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({\n  theme\n}) => theme.textColor};\n  margin-bottom: 20px;\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n_c7 = AirFlow;\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({\n  theme\n}) => theme.textColor};\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n_c8 = Rain;\nconst Refresh = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: ${({\n  theme\n}) => theme.textColor};\n\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n    /* STEP 2：使用 rotate 動畫效果在 svg 圖示上 */\n    animation: rotate infinite 1.5s linear;\n    animation-duration: ${({\n  isLoading\n}) => isLoading ? '1.5s' : '0s'};\n  }\n  /* STEP 1：定義旋轉的動畫效果，並取名為 rotate */\n  @keyframes rotate {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n`;\n_c9 = Refresh;\nconst Cog = styled(CogIcon)`\n  position: absolute;\n  top: 30px;\n  right: 15px;\n  width: 15px;\n  height: 15px;\n  cursor: pointer;\n`;\n_c10 = Cog;\n\nconst WeatherCard = ({\n  cityName,\n  weatherElement,\n  moment,\n  fetchData,\n  handleCurrentPageChange\n}) => {\n  const {\n    temperature,\n    windSpeed,\n    observationTime,\n    description,\n    rainPossibility,\n    weatherCode,\n    comfortability,\n    isLoading\n  } = weatherElement;\n  return /*#__PURE__*/_jsxDEV(WeatherCardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Cog, {\n      onClick: () => handleCurrentPageChange('WeatherSetting')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Location, {\n      children: cityName\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Description, {\n      children: [description, \" \", comfortability]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(CurrentWeather, {\n      children: [/*#__PURE__*/_jsxDEV(Temperature, {\n        children: [Math.round(temperature), \" \", /*#__PURE__*/_jsxDEV(Celsius, {\n          children: \"\\xB0C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 138,\n          columnNumber: 43\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(WeatherIcon, {\n        weatherCode: weatherCode,\n        moment: moment\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(AirFlow, {\n      children: [/*#__PURE__*/_jsxDEV(AirFlowIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 13\n      }, this), \" \", windSpeed, \" m/h\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 142,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Rain, {\n      children: [/*#__PURE__*/_jsxDEV(RainIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 13\n      }, this), \" \", rainPossibility, \"%\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Refresh, {\n      onClick: fetchData,\n      isLoading: isLoading,\n      children: [\"\\u6700\\u5F8C\\u89C0\\u6E2C\\u6642\\u9593\\uFF1A\", new Intl.DateTimeFormat('zh-TW', {\n        hour: 'numeric',\n        minute: 'numeric'\n      }).format(dayjs(observationTime)), isLoading ? /*#__PURE__*/_jsxDEV(LoadingIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 26\n      }, this) : /*#__PURE__*/_jsxDEV(RefreshIcon, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 157,\n        columnNumber: 43\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 132,\n    columnNumber: 9\n  }, this);\n};\n\n_c11 = WeatherCard;\nexport default WeatherCard;\n\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11;\n\n$RefreshReg$(_c, \"WeatherCardWrapper\");\n$RefreshReg$(_c2, \"Location\");\n$RefreshReg$(_c3, \"Description\");\n$RefreshReg$(_c4, \"CurrentWeather\");\n$RefreshReg$(_c5, \"Temperature\");\n$RefreshReg$(_c6, \"Celsius\");\n$RefreshReg$(_c7, \"AirFlow\");\n$RefreshReg$(_c8, \"Rain\");\n$RefreshReg$(_c9, \"Refresh\");\n$RefreshReg$(_c10, \"Cog\");\n$RefreshReg$(_c11, \"WeatherCard\");","map":{"version":3,"sources":["/Users/michelle/Desktop/Dastine/web/realtime-weather-app/src/views/WeatherCard.js"],"names":["React","styled","dayjs","WeatherIcon","WeatherCardWrapper","div","theme","boxShadow","foregroundColor","Location","titleColor","Description","textColor","CurrentWeather","Temperature","temperatureColor","Celsius","AirFlow","Rain","Refresh","isLoading","Cog","CogIcon","WeatherCard","cityName","weatherElement","moment","fetchData","handleCurrentPageChange","temperature","windSpeed","observationTime","description","rainPossibility","weatherCode","comfortability","Math","round","Intl","DateTimeFormat","hour","minute","format"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport styled from '@emotion/styled';\nimport dayjs from 'dayjs';\n\nimport { ReactComponent as AirFlowIcon } from './../images/airFlow.svg';\nimport { ReactComponent as RainIcon } from './../images/rain.svg';\nimport { ReactComponent as RefreshIcon } from './../images/refresh.svg';\nimport { ReactComponent as LoadingIcon } from './../images/loading.svg';\nimport { ReactComponent as CogIcon } from './../images/cog.svg';\nimport WeatherIcon from './../components/WeatherIcon';\n\nconst WeatherCardWrapper = styled.div`\n  position: relative;\n  min-width: 360px;\n  box-shadow: ${({ theme }) => theme.boxShadow};\n  background-color: ${({ theme }) => theme.foregroundColor};\n  box-sizing: border-box;\n  padding: 30px 15px;\n`;\n\nconst Location = styled.div`\n  font-size: 28px;\n  color: ${({ theme }) => theme.titleColor};\n  margin-bottom: 20px;\n`;\n\nconst Description = styled.div`\n  font-size: 16px;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 30px;\n`;\n\nconst CurrentWeather = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  margin-bottom: 30px;\n`;\n\nconst Temperature = styled.div`\n  color: ${({ theme }) => theme.temperatureColor};\n  font-size: 96px;\n  font-weight: 300;\n  display: flex;\n`;\n\nconst Celsius = styled.div`\n  font-weight: normal;\n  font-size: 42px;\n`;\n\nconst AirFlow = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n  margin-bottom: 20px;\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n\nconst Rain = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: 16x;\n  font-weight: 300;\n  color: ${({ theme }) => theme.textColor};\n\n  svg {\n    width: 25px;\n    height: auto;\n    margin-right: 30px;\n  }\n`;\n\nconst Refresh = styled.div`\n  position: absolute;\n  right: 15px;\n  bottom: 15px;\n  font-size: 12px;\n  display: inline-flex;\n  align-items: flex-end;\n  color: ${({ theme }) => theme.textColor};\n\n  svg {\n    margin-left: 10px;\n    width: 15px;\n    height: 15px;\n    cursor: pointer;\n    /* STEP 2：使用 rotate 動畫效果在 svg 圖示上 */\n    animation: rotate infinite 1.5s linear;\n    animation-duration: ${({ isLoading }) => (isLoading ? '1.5s' : '0s')};\n  }\n  /* STEP 1：定義旋轉的動畫效果，並取名為 rotate */\n  @keyframes rotate {\n    from {\n      transform: rotate(360deg);\n    }\n    to {\n      transform: rotate(0deg);\n    }\n  }\n`;\n\nconst Cog = styled(CogIcon)`\n  position: absolute;\n  top: 30px;\n  right: 15px;\n  width: 15px;\n  height: 15px;\n  cursor: pointer;\n`;\n\nconst WeatherCard = ({ cityName, weatherElement, moment, fetchData, handleCurrentPageChange }) => {\n    const {\n        temperature,\n        windSpeed,\n        observationTime,\n        description,\n        rainPossibility,\n        weatherCode,\n        comfortability,\n        isLoading\n      } = weatherElement;\n\n    return (\n        <WeatherCardWrapper>\n            <Cog onClick={ () => handleCurrentPageChange('WeatherSetting') }/>\n            <Location>{cityName}</Location>\n            <Description>{description} {comfortability}</Description>\n            <CurrentWeather>\n            <Temperature>\n                {Math.round(temperature)} <Celsius>°C</Celsius>\n            </Temperature>\n            <WeatherIcon weatherCode={weatherCode} moment={moment}/>\n            </CurrentWeather>\n            <AirFlow>\n            <AirFlowIcon /> {windSpeed} m/h\n            </AirFlow>\n            <Rain>\n            <RainIcon /> {rainPossibility}%\n            </Rain>\n            <Refresh \n                onClick={fetchData} \n                isLoading={isLoading}\n            >\n            最後觀測時間：\n            {new Intl.DateTimeFormat('zh-TW', {\n                hour: 'numeric',\n                minute: 'numeric',\n            }).format(dayjs(observationTime))} \n            {isLoading ? <LoadingIcon/> : <RefreshIcon />}\n            </Refresh>\n        </WeatherCardWrapper>\n    )\n};\n\nexport default WeatherCard;"]},"metadata":{},"sourceType":"module"}